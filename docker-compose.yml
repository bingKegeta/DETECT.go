services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: prod
    restart: unless-stopped
    ports:
      - "${PORT}:${PORT}"
      - "${WEBSOCKET_PORT}:${WEBSOCKET_PORT}"
    environment:
      APP_ENV: ${APP_ENV}
      PORT: ${PORT}
      DB_HOST: psql_bp
      DB_PORT: ${DB_PORT}
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_SCHEMA: ${DB_SCHEMA}
      JWT_SECRET: ${JWT_SECRET}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      DB_CONNECTION: ${DB_CONNECTION}
      CLIENT_URL: ${CLIENT_URL}
      SERVER_URL: ${SERVER_URL}
    depends_on:
      psql_bp:
        condition: service_healthy
    networks:
      - comm_channel

  psql_bp:
    image: postgres:latest
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - comm_channel

networks:
  comm_channel:
    driver: bridge
